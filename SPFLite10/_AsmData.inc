'---------- ASMDATA tables
'
'----- License Stuff
'This file is part of SPFLite.

'    SPFLite is free software: you can redistribute it and/or modify
'    it under the terms of the GNU General Public License as published by
'    the Free Software Foundation, either version 3 of the License, or
'    (at your option) any later version.
'
'    SPFLite is distributed in the hope that it will be useful,
'    but WITHOUT ANY WARRANTY; without even the implied warranty of
'    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'    GNU General Public License for more details.
'
'    You should have received a copy of the GNU General Public License
'    along with SPFLite.  If not, see <https://www.gnu.org/licenses/>.

'---------- FCS32 hash tables
ASMDATA FCS32table:
   DD &h00000000,&h77073096,&hEE0E612C,&h990951BA,&h076DC419,&h706AF48F,&hE963A535,&h9E6495A3,&h0EDB8832,&h79DCB8A4,&hE0D5E91E,&h97D2D988,&h09B64C2B,&h7EB17CBD,&hE7B82D07,&h90BF1D91
   DD &h1DB71064,&h6AB020F2,&hF3B97148,&h84BE41DE,&h1ADAD47D,&h6DDDE4EB,&hF4D4B551,&h83D385C7,&h136C9856,&h646BA8C0,&hFD62F97A,&h8A65C9EC,&h14015C4F,&h63066CD9,&hFA0F3D63,&h8D080DF5
   DD &h3B6E20C8,&h4C69105E,&hD56041E4,&hA2677172,&h3C03E4D1,&h4B04D447,&hD20D85FD,&hA50AB56B,&h35B5A8FA,&h42B2986C,&hDBBBC9D6,&hACBCF940,&h32D86CE3,&h45DF5C75,&hDCD60DCF,&hABD13D59
   DD &h26D930AC,&h51DE003A,&hC8D75180,&hBFD06116,&h21B4F4B5,&h56B3C423,&hCFBA9599,&hB8BDA50F,&h2802B89E,&h5F058808,&hC60CD9B2,&hB10BE924,&h2F6F7C87,&h58684C11,&hC1611DAB,&hB6662D3D
   DD &h76DC4190,&h01DB7106,&h98D220BC,&hEFD5102A,&h71B18589,&h06B6B51F,&h9FBFE4A5,&hE8B8D433,&h7807C9A2,&h0F00F934,&h9609A88E,&hE10E9818,&h7F6A0DBB,&h086D3D2D,&h91646C97,&hE6635C01
   DD &h6B6B51F4,&h1C6C6162,&h856530D8,&hF262004E,&h6C0695ED,&h1B01A57B,&h8208F4C1,&hF50FC457,&h65B0D9C6,&h12B7E950,&h8BBEB8EA,&hFCB9887C,&h62DD1DDF,&h15DA2D49,&h8CD37CF3,&hFBD44C65
   DD &h4DB26158,&h3AB551CE,&hA3BC0074,&hD4BB30E2,&h4ADFA541,&h3DD895D7,&hA4D1C46D,&hD3D6F4FB,&h4369E96A,&h346ED9FC,&hAD678846,&hDA60B8D0,&h44042D73,&h33031DE5,&hAA0A4C5F,&hDD0D7CC9
   DD &h5005713C,&h270241AA,&hBE0B1010,&hC90C2086,&h5768B525,&h206F85B3,&hB966D409,&hCE61E49F,&h5EDEF90E,&h29D9C998,&hB0D09822,&hC7D7A8B4,&h59B33D17,&h2EB40D81,&hB7BD5C3B,&hC0BA6CAD
   DD &hEDB88320,&h9ABFB3B6,&h03B6E20C,&h74B1D29A,&hEAD54739,&h9DD277AF,&h04DB2615,&h73DC1683,&hE3630B12,&h94643B84,&h0D6D6A3E,&h7A6A5AA8,&hE40ECF0B,&h9309FF9D,&h0A00AE27,&h7D079EB1
   DD &hF00F9344,&h8708A3D2,&h1E01F268,&h6906C2FE,&hF762575D,&h806567CB,&h196C3671,&h6E6B06E7,&hFED41B76,&h89D32BE0,&h10DA7A5A,&h67DD4ACC,&hF9B9DF6F,&h8EBEEFF9,&h17B7BE43,&h60B08ED5
   DD &hD6D6A3E8,&hA1D1937E,&h38D8C2C4,&h4FDFF252,&hD1BB67F1,&hA6BC5767,&h3FB506DD,&h48B2364B,&hD80D2BDA,&hAF0A1B4C,&h36034AF6,&h41047A60,&hDF60EFC3,&hA867DF55,&h316E8EEF,&h4669BE79
   DD &hCB61B38C,&hBC66831A,&h256FD2A0,&h5268E236,&hCC0C7795,&hBB0B4703,&h220216B9,&h5505262F,&hC5BA3BBE,&hB2BD0B28,&h2BB45A92,&h5CB36A04,&hC2D7FFA7,&hB5D0CF31,&h2CD99E8B,&h5BDEAE1D
   DD &h9B64C2B0,&hEC63F226,&h756AA39C,&h026D930A,&h9C0906A9,&hEB0E363F,&h72076785,&h05005713,&h95BF4A82,&hE2B87A14,&h7BB12BAE,&h0CB61B38,&h92D28E9B,&hE5D5BE0D,&h7CDCEFB7,&h0BDBDF21
   DD &h86D3D2D4,&hF1D4E242,&h68DDB3F8,&h1FDA836E,&h81BE16CD,&hF6B9265B,&h6FB077E1,&h18B74777,&h88085AE6,&hFF0F6A70,&h66063BCA,&h11010B5C,&h8F659EFF,&hF862AE69,&h616BFFD3,&h166CCF45
   DD &hA00AE278,&hD70DD2EE,&h4E048354,&h3903B3C2,&hA7672661,&hD06016F7,&h4969474D,&h3E6E77DB,&hAED16A4A,&hD9D65ADC,&h40DF0B66,&h37D83BF0,&hA9BCAE53,&hDEBB9EC5,&h47B2CF7F,&h30B5FFE9
   DD &hBDBDF21C,&hCABAC28A,&h53B39330,&h24B4A3A6,&hBAD03605,&hCDD70693,&h54DE5729,&h23D967BF,&hB3667A2E,&hC4614AB8,&h5D681B02,&h2A6F2B94,&hB40BBE37,&hC30C8EA1,&h5A05DF1B,&h2D02EF8D
END ASMDATA

'---------- UC translate table with European characters for StrCmp routine
ASMDATA Cmpi_tbl
   DB   0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15
   DB  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31
   DB  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47
   DB  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63
   DB  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,  78,  79
   DB  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95
   DB  96,  65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,  78,  79
   DB  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90, 123, 124, 125, 126, 127
   DB 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143
   DB 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 138, 155, 140, 157, 142, 159
   DB 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175
   DB 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191
   DB 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207
   DB 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223
   DB 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207
   DB 208, 209, 210, 211, 212, 213, 214, 247, 216, 217, 218, 219, 220, 221, 222, 159
END ASMDATA

' The table below is the standard MS 1252 to IBM 1140 translation table

ASMDATA tran_A2E_tab
  DB   &h00, &h01, &h02, &h03, &h37, &h2D, &h2E, &h2F, &h16, &h05, &h25, &h0B, &h0C, &h0D, &h0E, &h0F
  DB   &h10, &h11, &h12, &h13, &h3C, &h3D, &h32, &h26, &h18, &h19, &h3F, &h27, &h1C, &h1D, &h1E, &h1F
  DB   &h40, &h5A, &h7F, &h7B, &h5B, &h6C, &h50, &h7D, &h4D, &h5D, &h5C, &h4E, &h6B, &h60, &h4B, &h61
  DB   &hF0, &hF1, &hF2, &hF3, &hF4, &hF5, &hF6, &hF7, &hF8, &hF9, &h7A, &h5E, &h4C, &h7E, &h6E, &h6F
  DB   &h7C, &hC1, &hC2, &hC3, &hC4, &hC5, &hC6, &hC7, &hC8, &hC9, &hD1, &hD2, &hD3, &hD4, &hD5, &hD6
  DB   &hD7, &hD8, &hD9, &hE2, &hE3, &hE4, &hE5, &hE6, &hE7, &hE8, &hE9, &hBA, &hE0, &hBB, &hB0, &h6D
  DB   &h79, &h81, &h82, &h83, &h84, &h85, &h86, &h87, &h88, &h89, &h91, &h92, &h93, &h94, &h95, &h96
  DB   &h97, &h98, &h99, &hA2, &hA3, &hA4, &hA5, &hA6, &hA7, &hA8, &hA9, &hC0, &h4F, &hD0, &hA1, &h07
  DB   &h9F, &h21, &h22, &h23, &h24, &h15, &h06, &h17, &h28, &h29, &h2A, &h2B, &h2C, &h09, &h0A, &h1B
  DB   &h30, &h31, &h1A, &h33, &h34, &h35, &h36, &h08, &h38, &h39, &h3A, &h3B, &h04, &h14, &h3E, &hFF
  DB   &h41, &hAA, &h4A, &hB1, &h20, &hB2, &h6A, &hB5, &hBD, &hB4, &h9A, &h8A, &h5F, &hCA, &hAF, &hBC
  DB   &h90, &h8F, &hEA, &hFA, &hBE, &hA0, &hB6, &hB3, &h9D, &hDA, &h9B, &h8B, &hB7, &hB8, &hB9, &hAB
  DB   &h64, &h65, &h62, &h66, &h63, &h67, &h9E, &h68, &h74, &h71, &h72, &h73, &h78, &h75, &h76, &h77
  DB   &hAC, &h69, &hED, &hEE, &hEB, &hEF, &hEC, &hBF, &h80, &hFD, &hFE, &hFB, &hFC, &hAD, &hAE, &h59
  DB   &h44, &h45, &h42, &h46, &h43, &h47, &h9C, &h48, &h54, &h51, &h52, &h53, &h58, &h55, &h56, &h57
  DB   &h8C, &h49, &hCD, &hCE, &hCB, &hCF, &hCC, &hE1, &h70, &hDD, &hDE, &hDB, &hDC, &h8D, &h8E, &hDF
END ASMDATA

ASMDATA tran_E2A_tab
  DB   &h00, &h01, &h02, &h03, &h9C, &h09, &h86, &h7F, &h97, &h8D, &h8E, &h0B, &h0C, &h0D, &h0E, &h0F
  DB   &h10, &h11, &h12, &h13, &h9D, &h85, &h08, &h87, &h18, &h19, &h92, &h8F, &h1C, &h1D, &h1E, &h1F
  DB   &hA4, &h81, &h82, &h83, &h84, &h0A, &h17, &h1B, &h88, &h89, &h8A, &h8B, &h8C, &h05, &h06, &h07
  DB   &h90, &h91, &h16, &h93, &h94, &h95, &h96, &h04, &h98, &h99, &h9A, &h9B, &h14, &h15, &h9E, &h1A
  DB   &h20, &hA0, &hE2, &hE4, &hE0, &hE1, &hE3, &hE5, &hE7, &hF1, &hA2, &h2E, &h3C, &h28, &h2B, &h7C
  DB   &h26, &hE9, &hEA, &hEB, &hE8, &hED, &hEE, &hEF, &hEC, &hDF, &h21, &h24, &h2A, &h29, &h3B, &hAC
  DB   &h2D, &h2F, &hC2, &hC4, &hC0, &hC1, &hC3, &hC5, &hC7, &hD1, &hA6, &h2C, &h25, &h5F, &h3E, &h3F
  DB   &hF8, &hC9, &hCA, &hCB, &hC8, &hCD, &hCE, &hCF, &hCC, &h60, &h3A, &h23, &h40, &h27, &h3D, &h22
  DB   &hD8, &h61, &h62, &h63, &h64, &h65, &h66, &h67, &h68, &h69, &hAB, &hBB, &hF0, &hFD, &hFE, &hB1
  DB   &hB0, &h6A, &h6B, &h6C, &h6D, &h6E, &h6F, &h70, &h71, &h72, &hAA, &hBA, &hE6, &hB8, &hC6, &h80
  DB   &hB5, &h7E, &h73, &h74, &h75, &h76, &h77, &h78, &h79, &h7A, &hA1, &hBF, &hD0, &hDD, &hDE, &hAE
  DB   &h5E, &hA3, &hA5, &hB7, &hA9, &hA7, &hB6, &hBC, &hBD, &hBE, &h5B, &h5D, &hAF, &hA8, &hB4, &hD7
  DB   &h7B, &h41, &h42, &h43, &h44, &h45, &h46, &h47, &h48, &h49, &hAD, &hF4, &hF6, &hF2, &hF3, &hF5
  DB   &h7D, &h4A, &h4B, &h4C, &h4D, &h4E, &h4F, &h50, &h51, &h52, &hB9, &hFB, &hFC, &hF9, &hFA, &hFF
  DB   &h5C, &hF7, &h53, &h54, &h55, &h56, &h57, &h58, &h59, &h5A, &hB2, &hD4, &hD6, &hD2, &hD3, &hD5
  DB   &h30, &h31, &h32, &h33, &h34, &h35, &h36, &h37, &h38, &h39, &hB3, &hDB, &hDC, &hD9, &hDA, &h9F
END ASMDATA


'/----------------------------------------------------------------------------------------------------------------------------
'/ opr_table:          ' each entry is 11 bytes
'/
'/   --- opcode str ---  LEN   opr_item         Prec  nOp  bias     op= opr_item  class
'/
'/      [0]  [1]  [2]  [3]  [4]  [5]                [6]   [7]   [8]   [9]           [10]
'/
'/ unary +/- are not found by the search routine.
'/ instead, they are detected by context and we directly point to these
'/ entries and bypass the search process.
'/----------------------------------------------------------------------------------------------------------------------------


ASMDATA opr_table_unary_plus_cp
   DB   "+",  0 ,  0 ,  0,   1,   %opr_U_POS    ,   15,   +1,   +2,    0           , %cls_U  '/  +     =  UNARY POSITIVE
END ASMDATA

ASMDATA opr_table_unary_minus_cp
   DB   "-",  0 ,  0 ,  0,   1,   %opr_U_NEG    ,   15,   +1,   +2,    0           , %cls_U  '/  -     =  UNARY NEGATE
END ASMDATA

ASMDATA opr_table_0_cp
   DB    0 ,  0 ,  0 ,  0,   0,   0             ,    0,    0,    0,    0           , 0           '/  start of table
END ASMDATA

'/   --- opcode str ---  LEN   opr_item         Prec  nOp  bias     op= opr_item  class

ASMDATA opr_table_1_cp
   DB   "!",  0 ,  0 ,  0,   1,   %opr_U_L_NOT  ,   15,   +1,   +2,    0           , %cls_U  '/  !  01 =  UNARY LOGICAL NOT
   DB   "#",  0 ,  0 ,  0,   1,   %opr_N_SCALE  ,   12,    2,    0,    0           , %cls_B  '/  #  02 =  NUMERIC SCALE
   DB   "$",  0 ,  0 ,  0,   1,   %opr_U_SGN    ,   15,   +1,   +2,    0           , %cls_U  '/  $  03 =  UNARY SGN
   DB   "%",  0 ,  0 ,  0,   1,   %opr_C_MOD    ,   14,    2,    0,    0           , %cls_B  '/  %  04 =  MODULUS - C SYNTAX
   DB   "&",  0 ,  0 ,  0,   1,   %opr_B_AND    ,    9,    2,    0,    0           , %cls_B  '/  &  05 =  BITWISE AND
   DB   "*",  0 ,  0 ,  0,   1,   %opr_MUL      ,   14,    2,    0,    0           , %cls_B  '/  *  06 =  MULTIPLY
   DB   "+",  0 ,  0 ,  0,   1,   %opr_ADD      ,   13,    2,    0,    0           , %cls_B  '/  +  07 =  ADD
   DB   ",",  0 ,  0 ,  0,   1,   %opr_COMMA    ,    1,    2,   +0,    0           , %cls_comma  '/ 08 =  COMMA IN [] SET
   DB   "-",  0 ,  0 ,  0,   1,   %opr_SUB      ,   13,    2,    0,    0           , %cls_B  '/  -  09 =  SUBTRACT
   DB   "/",  0 ,  0 ,  0,   1,   %opr_DIV      ,   14,    2,    0,    0           , %cls_B  '/  /  10 =  DIVIDE
   DB   "<",  0 ,  0 ,  0,   1,   %opr_LT       ,   11,    2,    0,    0           , %cls_B  '/  <  11 =  LESS THAN
   DB   "=",  0 ,  0 ,  0,   1,   %opr_ASSIGN_EQ ,   2,    2,   +2,    0           ,0000000  '/   =  12 =  VIRTUAL ASSIGN/EQ
   DB   ">",  0 ,  0 ,  0,   1,   %opr_GT       ,   11,    2,    0,    0           , %cls_B  '/  >  13 =  GREATER THAN
   DB   "@",  0 ,  0 ,  0,   1,   %opr_U_ABS    ,   15,   +1,   +2,    0           , %cls_U  '/  @  14 =  UNARY ABS
   DB   "[",  0 ,  0 ,  0,   1,   %opr_L_SET    ,    2,    2,   +0,    0           , %cls_LB '/  [  15 =  [ IN [] SET
   DB   "\",  0 ,  0 ,  0,   1,   %opr_MOD_S    ,   14,    2,    0,    0           , %cls_B  '/  \  16 =  MODULUS - STD SYNTAX
   DB   "]",  0 ,  0 ,  0,   1,   %opr_R_SET    ,    1,    2,   +0,    0           , %cls_RB '/  ]  17 =  ] IN [] SET
   DB   "^",  0 ,  0 ,  0,   1,   %opr_B_XOR    ,    8,    2,    0,    0           , %cls_B  '/  ^  18 =  BITWISE XOR
   DB   "|",  0 ,  0 ,  0,   1,   %opr_B_OR     ,    7,    2,    0,    0           , %cls_B  '/  |  19 =  BITWISE OR
   DB   "~",  0 ,  0 ,  0,   1,   %opr_U_B_NOT  ,   15,   +1,   +2,    0           , %cls_U  '/  ~  20 =  UNARY BITWISE NEGATION
END ASMDATA

ASMDATA opr_table_2_cp
   DB   "!", "<",  0 ,  0,   2,   %opr_NLT      ,   11,    2,    0,    0           , %cls_B  '/  !< 21 =  NOT LESS THAN
   DB   "!", "=",  0 ,  0,   2,   %opr_NE_C     ,   10,    2,    0,    0           , %cls_B  '/  != 22 =  NOT EQUAL TO - C SYNTAX
   DB   "!", ">",  0 ,  0,   2,   %opr_NGT      ,   11,    2,    0,    0           , %cls_B  '/  !> 23 =  NOT GREATER THAN
   DB   "#", "#",  0 ,  0,   2,   %opr_B_SCALE  ,   12,    2,    0,    0           , %cls_B  '/  ## 24 =  BITWISE SCALE
   DB   "#", "=",  0 ,  0,   2,   %opr_A_N_SCALE ,   2,    2,   +2,    %opr_N_SCALE, %cls_A  '/  #= 25 =  NUMERIC SCALE
   DB   "$", "$",  0 ,  0,   2,   %opr_U_SGN_X  ,   15,   +1,   +2,    0           , %cls_U  '/  $$ 26 =  UNARY SGN/INDEX = 2+$
   DB   "%", "=",  0 ,  0,   2,   %opr_A_C_MOD  ,    2,    2,   +2,    %opr_C_MOD  , %cls_A  '/  %= 27 =  MODULUS - C SYNTAX
   DB   "&", "&",  0 ,  0,   2,   %opr_L_AND    ,    6,    2,    0,    0           , %cls_B  '/  && 28 =  LOGICAL AND
   DB   "&", "=",  0 ,  0,   2,   %opr_A_B_AND  ,    2,    2,   +2,    %opr_B_AND  , %cls_A  '/  &= 29 =  BITWISE AND
   DB   "*", "=",  0 ,  0,   2,   %opr_A_MUL    ,    2,    2,   +2,    %opr_MUL    , %cls_A  '/  *= 30 =  MULTIPLY
   DB   "+", "=",  0 ,  0,   2,   %opr_A_ADD    ,    2,    2,   +2,    %opr_ADD    , %cls_A  '/  += 31 =  ADD
   DB   "+", ">",  0 ,  0,   2,   %opr_N_SR     ,   12,    2,    0,    0           , %cls_B  '/  +> 32 =  NUMERIC SHIFT RIGHT
   DB   "-", "=",  0 ,  0,   2,   %opr_A_SUB    ,    2,    2,   +2,    %opr_SUB    , %cls_A  '/  -= 33 =  SUBTRACT
   DB   "/", "=",  0 ,  0,   2,   %opr_A_DIV    ,    2,    2,   +2,    %opr_DIV    , %cls_A  '/  /= 34 =  DIVIDE
   DB   ":", ":",  0 ,  0,   2,   %opr_SWAP     ,    2,    2,   +2,    0           , %cls_S  '/  :: 35 =  SWAP VARIABLES
END ASMDATA

ASMDATA opr_table_ASSIGN_cp
   DB   ":", "=",  0 ,  0,   2,   %opr_ASSIGN   ,    1,    2,   +2,    0           , %cls_A  '/  := 36 =  EXPLICIT ASSIGN
   DB   "<", ":",  0 ,  0,   2,   %opr_MAKE_LE  ,    2,    2,   +2,    0           , %cls_S  '/  <: 37 =  X <: Y MAKES X <= Y
   DB   "<", "<",  0 ,  0,   2,   %opr_B_SL     ,   12,    2,    0,    0           , %cls_B  '/  << 38 =  BITWISE SHIFT LEFT
   DB   "<", "=",  0 ,  0,   2,   %opr_LE       ,   11,    2,    0,    0           , %cls_B  '/  <= 39 =  LESS THAN OR EQUAL TO
   DB   "<", ">",  0 ,  0,   2,   %opr_NE_S     ,   10,    2,    0,    0           , %cls_B  '/  <> 40 =  NOT EQUAL TO - STD SYNTAX
END ASMDATA

ASMDATA opr_table_EQ_cp
   DB   "=", "=",  0 ,  0,   2,   %opr_EQ       ,   10,    2,    0,    0           , %cls_B  '/  == 41 =  EQUAL TO - C SYNTAX
   DB   ">", ":",  0 ,  0,   2,   %opr_MAKE_GE  ,    2,    2,   +2,    0           , %cls_S  '/  >: 42 =  X >: Y MAKES X >= Y
   DB   ">", "=",  0 ,  0,   2,   %opr_GE       ,   11,    2,    0,    0           , %cls_B  '/  >= 43 =  GREATER THAN OR EQUAL TO
   DB   ">", ">",  0 ,  0,   2,   %opr_B_SR     ,   12,    2,    0,    0           , %cls_B  '/  >> 44 =  BITWISE SHIFT RIGHT
   DB   "\", "=",  0 ,  0,   2,   %opr_A_MOD_S  ,    2,    2,   +2,    %opr_MOD_S  , %cls_A  '/  \= 45 =  MODULUS - STD SYNTAX
   DB   "^", "=",  0 ,  0,   2,   %opr_A_B_XOR  ,    2,    2,   +2,    %opr_B_XOR  , %cls_A  '/  ^= 46 =  BITWISE XOR
   DB   "^", "^",  0 ,  0,   2,   %opr_L_XOR    ,    5,    2,    0,    0           , %cls_B  '/  ^^ 47 =  LOGICAL XOR
   DB   "|", "=",  0 ,  0,   2,   %opr_A_B_OR   ,    2,    2,   +2,    %opr_B_OR   , %cls_A  '/  |= 48 =  BITWISE OR
   DB   "|", "|",  0 ,  0,   2,   %opr_L_OR     ,    4,    2,    0,    0           , %cls_B  '/  || 49 =  LOGICAL OR
END ASMDATA

ASMDATA opr_table_3_cp
   DB   "!", "<", "=",  0,   3,   %opr_NLTE     ,   11,    2,    0,    0           , %cls_B  '/  !<=50 =  NOT LESS THAN OR EQUAL TO
   DB   "!", ">", "=",  0,   3,   %opr_NGTE     ,   11,    2,    0,    0           , %cls_B  '/  !>=51 =  NOT GREATER THAN OR EQUAL TO
   DB   "#", "#", "=",  0,   3,   %opr_A_B_SCALE ,   2,    2,   +2,    %opr_B_SCALE, %cls_A  '/  ##=52 =  BITWISE SCALE
   DB   "&", "&", "=",  0,   3,   %opr_A_L_AND  ,    2,    2,   +2,    %opr_L_AND  , %cls_A  '/  &&=53 =  LOGICAL AND
   DB   "+", ">", "=",  0,   3,   %opr_A_N_SR   ,    2,    2,   +2,    %opr_N_SR   , %cls_A  '/  +>=54 =  NUMERIC SHIFT RIGHT
   DB   "<", "<", "=",  0,   3,   %opr_A_B_SL   ,    2,    2,   +2,    %opr_B_SL   , %cls_A  '/  <<=55 =  BITWISE SHIFT LEFT
   DB   ">", ">", "=",  0,   3,   %opr_A_B_SR   ,    2,    2,   +2,    %opr_B_SR   , %cls_A  '/  >>=56 =  BITWISE SHIFT RIGHT
   DB   "^", "^", "=",  0,   3,   %opr_A_L_XOR  ,    2,    2,   +2,    %opr_L_XOR  , %cls_A  '/  ^^=57 =  LOGICAL XOR
   DB   "|", "|", "=",  0,   3,   %opr_A_L_OR   ,    2,    2,   +2,    %opr_L_OR   , %cls_A  '/  ||=58 =  LOGICAL OR
END ASMDATA

ASMDATA opr_table_4_cp
   DB    0 ,  0 ,  0 ,  0,   0,   0             ,    0,    0,    0,    0           , 0           '/  end of table
END ASMDATA

'/--------------------------------------------------------------------------

'/ follows lists: given a token type, what can validly follow it
'/
'/   {      >>>      ;   }
'/          [e[      n   v   (   U
'/
'/   ;      | |      ;   }
'/          [e[      n   v   (   U
'/
'/   ,      | |      ]                     -- trailing comma in list ignored
'/          [e[      n   v   (   U
'/
'/   (      [e[      n   v   (   U
'/
'/   )      )e)      ;   }   )   [   ,   ]   B
'/
'/   [      [e[      n   v   (   U
'/
'/   ]      )e)      ;   }   )   [   ,   ]   B
'/
'/   n      )e)      ;   }   )   [   ,   ]   B
'/
'/   v      | |      A   S
'/          )e)      ;   }   )   [   ,   ]   B
'/
'/   U      [e[      n   v   (   U
'/
'/   B      [e[      n   v   (   U
'/
'/   A      [e[      n   v   (   U
'/
'/   S      | |      v
'/
'/   }      | |      --- none ---
'/
'/--------------------------------------------------------------------------


ASMDATA fol_begin_cp
   DB  %cls_semi , %cls_end  , %cls_n    , %cls_v   , %cls_LP    , %cls_U  , 0
END ASMDATA

ASMDATA fol_semi_cp
   DB  %cls_semi , %cls_end  , %cls_n    , %cls_v   , %cls_LP    , %cls_U  , 0
END ASMDATA

ASMDATA fol_comma_cp
   DB  %cls_RB   ,   %cls_n  , %cls_v    , %cls_LP  , %cls_U     , 0
END ASMDATA

ASMDATA fol_LP_cp
   DB  %cls_n    ,   %cls_v  , %cls_LP   , %cls_U   , 0
END ASMDATA

ASMDATA fol_RP_cp
   DB  %cls_semi , %cls_end  , %cls_RP   , %cls_LB  , %cls_comma , %cls_RB , %cls_B, 0
END ASMDATA

ASMDATA fol_LB_cp
   DB  %cls_n    ,   %cls_v  , %cls_LP   , %cls_U   , 0
END ASMDATA

ASMDATA fol_RB_cp
   DB  %cls_semi , %cls_end  , %cls_RP   , %cls_LB  , %cls_comma , %cls_RB , %cls_B, 0
END ASMDATA

ASMDATA fol_n_cp
   DB  %cls_semi , %cls_end  , %cls_RP   , %cls_LB  , %cls_comma , %cls_RB , %cls_B, 0
END ASMDATA

ASMDATA fol_v_cp
   DB  %cls_A    ,   %cls_S  , %cls_semi , %cls_end , %cls_RP    , %cls_LB , %cls_comma , %cls_RB ,  %cls_B, 0
END ASMDATA

ASMDATA fol_U_cp
   DB  %cls_n    ,   %cls_v  , %cls_LP   , %cls_U   , 0
END ASMDATA

ASMDATA fol_B_cp
   DB  %cls_n    ,   %cls_v  , %cls_LP   , %cls_U   , 0
END ASMDATA

ASMDATA fol_A_cp
   DB  %cls_n    ,   %cls_v  , %cls_LP   , %cls_U   , 0
END ASMDATA

ASMDATA fol_S_cp
   DB  %cls_v    , 0
END ASMDATA

ASMDATA fol_end_cp
   DB  0
END ASMDATA

ASMDATA fol_null
   DB  0
END ASMDATA
